#!/usr/bin/env python3

import sys
import xmlrpc.client
import ssl
import subprocess
import time

class EpoptesClientManager:

	def __init__(self):
		
		self.epoptes_client_pid=None
		self.current_certificate_timestamp=None
		self.unconfigured_timeout=15
		self.configured_timeout=60*3
		context=ssl._create_unverified_context()
		self.n4d=xmlrpc.client.ServerProxy("https://localhost:9779",allow_none=True,context=context)
		
		self.run_forever()
		
	#def init
	
	def start_epoptes_client(self):
		
		if self.epoptes_client_pid == None:
			p=subprocess.Popen(["epoptes-client"])
			self.epoptes_client_pid=p.pid
			return True
		
		return False
		
	#def execute_epoptes_client
	
	def stop_epoptes_client(self):
		
		if self.epoptes_client_pid != None:
			os.system("kill -9 %s"%self.epoptes_client_pid)
			self.epoptes_client_pid=None
			return True
			
		return False
		
	#def stop_epoptes_client
	
	def restart_epoptes_client(self):
		
		self.stop_epoptes_client()
		self.start_epoptes_client()
		
	#def restart_epoptes_client
	
	def get_current_certificate_timestamp(self):
		
		cert_timestamp=None
		
		try:
			ret=self.n4d.get_certificate_timestamp("","EpoptesDesktopClient")
			if ret["status"]==0:
				cert_timestamp=ret["return"]
			else:
				print(ret)
		except Exception as e:
			print(e)
			
		return cert_timestamp
			
		
	#def get_current_certificate_timestamp
	
	def run_forever(self):
		
		while True:

			timeout=self.unconfigured_timeout
			
			timestamp=self.get_current_certificate_timestamp()
			if timestamp!=None:
				if timestamp!=self.current_certificate_timestamp:
					self.current_certificate_timestamp=timestamp
					self.restart_epoptes_client()
				
				timeout=self.configured_timeout
			
			time.sleep(timeout)
		
	#def run_forever
	
#class EpoptesClientManager

if __name__=="__main__":
	
	ecm=EpoptesClientManager()
	